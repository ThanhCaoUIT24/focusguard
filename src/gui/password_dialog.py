"""
Dialog x√°c th·ª±c m·∫≠t kh·∫©u
"""

from PyQt5.QtWidgets import (QDialog, QVBoxLayout, QHBoxLayout, QLabel, 
                            QLineEdit, QPushButton, QMessageBox, QCheckBox)
from PyQt5.QtCore import Qt, QTimer
from PyQt5.QtGui import QFont
from pathlib import Path
import sys

# Th√™m th∆∞ m·ª•c src v√†o path
current_dir = Path(__file__).parent.parent.parent
sys.path.insert(0, str(current_dir))

from src.core.password_manager import PasswordManager

class PasswordDialog(QDialog):
    """Dialog x√°c th·ª±c m·∫≠t kh·∫©u"""
    
    def __init__(self, password_manager: PasswordManager, title="X√°c th·ª±c m·∫≠t kh·∫©u", parent=None):
        super().__init__(parent)
        self.password_manager = password_manager
        self.title = title
        self.setup_ui()
        self.update_lockout_status()
        
        # Timer ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i kh√≥a
        self.timer = QTimer()
        self.timer.timeout.connect(self.update_lockout_status)
        self.timer.start(1000)  # C·∫≠p nh·∫≠t m·ªói gi√¢y
        
    def setup_ui(self):
        """Thi·∫øt l·∫≠p giao di·ªán"""
        self.setWindowTitle(self.title)
        self.setFixedSize(350, 200)
        self.setModal(True)
        
        layout = QVBoxLayout()
        layout.setSpacing(15)
        
        # Ti√™u ƒë·ªÅ
        title_label = QLabel("üîê " + self.title)
        title_font = QFont()
        title_font.setPointSize(14)
        title_font.setBold(True)
        title_label.setFont(title_font)
        title_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(title_label)
        
        # Th√¥ng tin tr·∫°ng th√°i
        self.status_label = QLabel()
        self.status_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(self.status_label)
        
        # Nh·∫≠p m·∫≠t kh·∫©u
        self.password_label = QLabel("M·∫≠t kh·∫©u:")
        layout.addWidget(self.password_label)
        
        self.password_input = QLineEdit()
        self.password_input.setEchoMode(QLineEdit.Password)
        self.password_input.setPlaceholderText("Nh·∫≠p m·∫≠t kh·∫©u")
        layout.addWidget(self.password_input)
        
        # Checkbox hi·ªÉn th·ªã m·∫≠t kh·∫©u
        self.show_password_cb = QCheckBox("Hi·ªÉn th·ªã m·∫≠t kh·∫©u")
        self.show_password_cb.toggled.connect(self.toggle_password_visibility)
        layout.addWidget(self.show_password_cb)
        
        # N√∫t b·∫•m
        button_layout = QHBoxLayout()
        
        self.cancel_btn = QPushButton("H·ªßy")
        self.cancel_btn.clicked.connect(self.reject)
        button_layout.addWidget(self.cancel_btn)
        
        self.verify_btn = QPushButton("X√°c th·ª±c")
        self.verify_btn.clicked.connect(self.verify_password)
        self.verify_btn.setDefault(True)
        button_layout.addWidget(self.verify_btn)
        
        layout.addLayout(button_layout)
        
        self.setLayout(layout)
        
        # Focus v√†o √¥ nh·∫≠p m·∫≠t kh·∫©u
        self.password_input.setFocus()
        
        # K·∫øt n·ªëi Enter key
        self.password_input.returnPressed.connect(self.verify_password)
    
    def toggle_password_visibility(self, checked):
        """B·∫≠t/t·∫Øt hi·ªÉn th·ªã m·∫≠t kh·∫©u"""
        if checked:
            self.password_input.setEchoMode(QLineEdit.Normal)
        else:
            self.password_input.setEchoMode(QLineEdit.Password)
    
    def update_lockout_status(self):
        """C·∫≠p nh·∫≠t tr·∫°ng th√°i kh√≥a"""
        if self.password_manager.is_locked_out():
            remaining = self.password_manager.get_lockout_remaining()
            minutes = remaining // 60
            seconds = remaining % 60
            
            self.status_label.setText(
                f"‚ö†Ô∏è T√†i kho·∫£n b·ªã kh√≥a!\n"
                f"Th·ªùi gian c√≤n l·∫°i: {minutes:02d}:{seconds:02d}"
            )
            self.status_label.setStyleSheet("color: red;")
            self.password_input.setEnabled(False)
            self.verify_btn.setEnabled(False)
            
            if remaining <= 0:
                # H·∫øt th·ªùi gian kh√≥a
                self.status_label.setText("")
                self.status_label.setStyleSheet("")
                self.password_input.setEnabled(True)
                self.verify_btn.setEnabled(True)
                self.password_input.setFocus()
        else:
            remaining_attempts = self.password_manager.get_remaining_attempts()
            if remaining_attempts < 3:
                self.status_label.setText(
                    f"‚ö†Ô∏è C√≤n {remaining_attempts} l·∫ßn th·ª≠"
                )
                self.status_label.setStyleSheet("color: orange;")
            else:
                self.status_label.setText("")
                self.status_label.setStyleSheet("")
            
            self.password_input.setEnabled(True)
            self.verify_btn.setEnabled(True)
    
    def verify_password(self):
        """X√°c th·ª±c m·∫≠t kh·∫©u"""
        if self.password_manager.is_locked_out():
            return
        
        password = self.password_input.text()
        
        if not password:
            QMessageBox.warning(self, "L·ªói", "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u!")
            return
        
        if self.password_manager.verify_password(password):
            self.accept()
        else:
            remaining = self.password_manager.get_remaining_attempts()
            
            if remaining > 0:
                QMessageBox.warning(
                    self,
                    "M·∫≠t kh·∫©u sai",
                    f"M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!\nC√≤n {remaining} l·∫ßn th·ª≠."
                )
            else:
                QMessageBox.critical(
                    self,
                    "T√†i kho·∫£n b·ªã kh√≥a",
                    "B·∫°n ƒë√£ nh·∫≠p sai m·∫≠t kh·∫©u qu√° nhi·ªÅu l·∫ßn.\n"
                    "T√†i kho·∫£n s·∫Ω b·ªã kh√≥a trong 5 ph√∫t."
                )
            
            self.password_input.clear()
            self.password_input.setFocus()
    
    def keyPressEvent(self, event):
        """X·ª≠ l√Ω ph√≠m b·∫•m"""
        if event.key() == Qt.Key_Escape:
            self.reject()
        else:
            super().keyPressEvent(event)
    
    def closeEvent(self, event):
        """X·ª≠ l√Ω ƒë√≥ng dialog"""
        if hasattr(self, 'timer'):
            self.timer.stop()
        super().closeEvent(event)
