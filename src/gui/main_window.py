"""
C·ª≠a s·ªï ch√≠nh c·ªßa FocusGuard
Giao di·ªán timer, qu·∫£n l√Ω website, th·ªëng k√™
"""

import sys
import os
from pathlib import Path
from PyQt5.QtWidgets import (QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, 
                            QLabel, QPushButton, QSpinBox, QListWidget, 
                            QLineEdit, QMessageBox, QTabWidget, QProgressBar,
                            QTextEdit, QCheckBox, QGroupBox, QGridLayout,
                            QSystemTrayIcon, QMenu, QAction, QSplitter)
from PyQt5.QtCore import Qt, QTimer, pyqtSignal, QThread
from PyQt5.QtGui import QFont, QIcon, QPixmap
import subprocess

# Th√™m th∆∞ m·ª•c src v√†o path
current_dir = Path(__file__).parent.parent.parent
sys.path.insert(0, str(current_dir))

from src.core.config_manager import ConfigManager
from src.core.password_manager import PasswordManager
from src.core.website_blocker import WebsiteBlocker
from src.core.session_manager import SessionManager
from src.gui.password_dialog import PasswordDialog
from src.gui.statistics_widget import StatisticsWidget

class FocusTimer(QThread):
    """Thread timer cho phi√™n t·∫≠p trung"""
    timeChanged = pyqtSignal(int)  # Th·ªùi gian c√≤n l·∫°i (gi√¢y)
    finished = pyqtSignal()
    
    def __init__(self):
        super().__init__()
        self.remaining_seconds = 0
        self.is_running = False
    
    def start_timer(self, duration_minutes):
        """B·∫Øt ƒë·∫ßu timer"""
        self.remaining_seconds = duration_minutes * 60
        self.is_running = True
        self.start()
    
    def stop_timer(self):
        """D·ª´ng timer"""
        self.is_running = False
        self.quit()
        self.wait()
    
    def run(self):
        """Ch·∫°y timer"""
        while self.is_running and self.remaining_seconds > 0:
            self.timeChanged.emit(self.remaining_seconds)
            self.msleep(1000)  # Sleep 1 gi√¢y
            self.remaining_seconds -= 1
        
        if self.remaining_seconds <= 0:
            self.finished.emit()

class MainWindow(QMainWindow):
    """C·ª≠a s·ªï ch√≠nh c·ªßa ·ª©ng d·ª•ng"""
    
    def __init__(self, config_manager: ConfigManager, password_manager: PasswordManager):
        super().__init__()
        
        self.config_manager = config_manager
        self.password_manager = password_manager
        self.website_blocker = WebsiteBlocker(config_manager.get_backup_hosts_path())
        self.session_manager = SessionManager(config_manager.get_data_dir())
        
        # Tr·∫°ng th√°i phi√™n
        self.current_session_id = None
        self.is_focus_session_active = False
        self.focus_timer = FocusTimer()
        
        # Thi·∫øt l·∫≠p UI
        self.setup_ui()
        self.setup_system_tray()
        self.setup_connections()
        
        # Kh√¥i ph·ª•c v·ªã tr√≠ c·ª≠a s·ªï
        self.restore_window_position()
        
        # Ki·ªÉm tra phi√™n ƒëang ch·∫°y
        self.check_existing_session()
    
    def setup_ui(self):
        """Thi·∫øt l·∫≠p giao di·ªán ng∆∞·ªùi d√πng"""
        self.setWindowTitle("FocusGuard - Qu·∫£n l√Ω s·ª± t·∫≠p trung")
        self.setMinimumSize(900, 700)
        
        # Widget ch√≠nh
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # Layout ch√≠nh
        main_layout = QHBoxLayout(central_widget)
        
        # Splitter ƒë·ªÉ chia c·ª≠a s·ªï
        splitter = QSplitter(Qt.Horizontal)
        main_layout.addWidget(splitter)
        
        # Panel b√™n tr√°i - Timer v√† controls
        left_panel = self.create_left_panel()
        splitter.addWidget(left_panel)
        
        # Panel b√™n ph·∫£i - Tabs
        right_panel = self.create_right_panel()
        splitter.addWidget(right_panel)
        
        # ƒê·∫∑t t·ª∑ l·ªá split
        splitter.setStretchFactor(0, 1)
        splitter.setStretchFactor(1, 2)
    
    def create_left_panel(self):
        """T·∫°o panel b√™n tr√°i v·ªõi timer v√† controls"""
        panel = QWidget()
        layout = QVBoxLayout(panel)
        layout.setSpacing(20)
        
        # === TIMER SECTION ===
        timer_group = QGroupBox("‚è±Ô∏è Timer T·∫≠p Trung")
        timer_layout = QVBoxLayout(timer_group)
        
        # Hi·ªÉn th·ªã th·ªùi gian
        self.time_display = QLabel("25:00")
        time_font = QFont()
        time_font.setPointSize(48)
        time_font.setBold(True)
        self.time_display.setFont(time_font)
        self.time_display.setAlignment(Qt.AlignCenter)
        self.time_display.setStyleSheet("color: #2196F3; background: #f0f0f0; border-radius: 10px; padding: 20px;")
        timer_layout.addWidget(self.time_display)
        
        # Thanh ti·∫øn tr√¨nh
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        timer_layout.addWidget(self.progress_bar)
        
        # C√†i ƒë·∫∑t th·ªùi gian
        time_setting_layout = QHBoxLayout()
        time_setting_layout.addWidget(QLabel("Th·ªùi l∆∞·ª£ng (ph√∫t):"))
        
        self.duration_spinbox = QSpinBox()
        self.duration_spinbox.setRange(1, 999)
        self.duration_spinbox.setValue(self.config_manager.get_focus_duration())
        time_setting_layout.addWidget(self.duration_spinbox)
        
        timer_layout.addLayout(time_setting_layout)
        
        # N√∫t ƒëi·ªÅu khi·ªÉn
        control_layout = QHBoxLayout()
        
        self.start_btn = QPushButton("üöÄ B·∫Øt ƒë·∫ßu")
        self.start_btn.clicked.connect(self.start_focus_session)
        control_layout.addWidget(self.start_btn)
        
        self.stop_btn = QPushButton("‚èπÔ∏è D·ª´ng")
        self.stop_btn.clicked.connect(self.stop_focus_session)
        self.stop_btn.setEnabled(False)
        control_layout.addWidget(self.stop_btn)
        
        timer_layout.addLayout(control_layout)
        
        layout.addWidget(timer_group)
        
        # === STRICT MODE ===
        strict_group = QGroupBox("üîí Ch·∫ø ƒë·ªô nghi√™m kh·∫Øc")
        strict_layout = QVBoxLayout(strict_group)
        
        self.strict_mode_cb = QCheckBox("B·∫≠t ch·∫ø ƒë·ªô nghi√™m kh·∫Øc")
        self.strict_mode_cb.setChecked(self.config_manager.is_strict_mode())
        self.strict_mode_cb.toggled.connect(self.toggle_strict_mode)
        strict_layout.addWidget(self.strict_mode_cb)
        
        strict_info = QLabel(
            "‚Ä¢ Kh√¥ng th·ªÉ d·ª´ng phi√™n s·ªõm\n"
            "‚Ä¢ Kh√¥ng th·ªÉ tho√°t ·ª©ng d·ª•ng\n"  
            "‚Ä¢ T·ª± kh·ªüi ƒë·ªông l·∫°i n·∫øu b·ªã kill"
        )
        strict_info.setStyleSheet("color: gray; font-size: 11px;")
        strict_layout.addWidget(strict_info)
        
        layout.addWidget(strict_group)
        
        # === QUICK STATS ===
        stats_group = QGroupBox("üìä Th·ªëng k√™ h√¥m nay")
        stats_layout = QGridLayout(stats_group)
        
        today_stats = self.session_manager.get_today_stats()
        
        self.total_time_label = QLabel(f"{today_stats['total_focus_time']} ph√∫t")
        stats_layout.addWidget(QLabel("T·ªïng th·ªùi gian:"), 0, 0)
        stats_layout.addWidget(self.total_time_label, 0, 1)
        
        self.sessions_count_label = QLabel(str(today_stats['sessions_completed']))
        stats_layout.addWidget(QLabel("Phi√™n ho√†n th√†nh:"), 1, 0)
        stats_layout.addWidget(self.sessions_count_label, 1, 1)
        
        self.success_rate_label = QLabel(f"{today_stats['success_rate']:.1f}%")
        stats_layout.addWidget(QLabel("T·ª∑ l·ªá th√†nh c√¥ng:"), 2, 0)
        stats_layout.addWidget(self.success_rate_label, 2, 1)
        
        layout.addWidget(stats_group)
        
        # Spacer ƒë·ªÉ ƒë·∫©y t·∫•t c·∫£ l√™n tr√™n
        layout.addStretch()
        
        return panel
    
    def create_right_panel(self):
        """T·∫°o panel b√™n ph·∫£i v·ªõi tabs"""
        # Tab widget
        self.tab_widget = QTabWidget()
        
        # Tab 1: Qu·∫£n l√Ω website
        website_tab = self.create_website_tab()
        self.tab_widget.addTab(website_tab, "üåê Website")
        
        # Tab 2: Th·ªëng k√™
        self.stats_widget = StatisticsWidget(self.session_manager)
        self.tab_widget.addTab(self.stats_widget, "üìà Th·ªëng k√™")
        
        # Tab 3: L·ªãch s·ª≠
        history_tab = self.create_history_tab()
        self.tab_widget.addTab(history_tab, "üìù L·ªãch s·ª≠")
        
        # Tab 4: C√†i ƒë·∫∑t
        settings_tab = self.create_settings_tab()
        self.tab_widget.addTab(settings_tab, "‚öôÔ∏è C√†i ƒë·∫∑t")
        
        return self.tab_widget
    
    def create_website_tab(self):
        """T·∫°o tab qu·∫£n l√Ω website"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # Danh s√°ch website b·ªã ch·∫∑n
        layout.addWidget(QLabel("üìõ Danh s√°ch website s·∫Ω b·ªã ch·∫∑n:"))
        
        self.website_list = QListWidget()
        self.update_website_list()
        layout.addWidget(self.website_list)
        
        # Th√™m website m·ªõi
        add_layout = QHBoxLayout()
        self.website_input = QLineEdit()
        self.website_input.setPlaceholderText("Nh·∫≠p t√™n website (vd: facebook.com)")
        add_layout.addWidget(self.website_input)
        
        add_btn = QPushButton("‚ûï Th√™m")
        add_btn.clicked.connect(self.add_website)
        add_layout.addWidget(add_btn)
        
        layout.addLayout(add_layout)
        
        # N√∫t x√≥a
        remove_btn = QPushButton("üóëÔ∏è X√≥a website ƒë√£ ch·ªçn")
        remove_btn.clicked.connect(self.remove_website)
        layout.addWidget(remove_btn)
        
        # K·∫øt n·ªëi Enter key
        self.website_input.returnPressed.connect(self.add_website)
        
        return widget
    
    def create_history_tab(self):
        """T·∫°o tab l·ªãch s·ª≠ phi√™n"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        layout.addWidget(QLabel("üìö L·ªãch s·ª≠ c√°c phi√™n t·∫≠p trung:"))
        
        self.history_text = QTextEdit()
        self.history_text.setReadOnly(True)
        self.update_history_display()
        layout.addWidget(self.history_text)
        
        # N√∫t refresh
        refresh_btn = QPushButton("üîÑ C·∫≠p nh·∫≠t")
        refresh_btn.clicked.connect(self.update_history_display)
        layout.addWidget(refresh_btn)
        
        return widget
    
    def create_settings_tab(self):
        """T·∫°o tab c√†i ƒë·∫∑t"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # ƒê·ªïi m·∫≠t kh·∫©u
        password_group = QGroupBox("üîê B·∫£o m·∫≠t")
        password_layout = QVBoxLayout(password_group)
        
        change_password_btn = QPushButton("ƒê·ªïi m·∫≠t kh·∫©u")
        change_password_btn.clicked.connect(self.change_password)
        password_layout.addWidget(change_password_btn)
        
        layout.addWidget(password_group)
        
        # Ki·ªÉm tra quy·ªÅn sudo
        sudo_group = QGroupBox("‚öôÔ∏è H·ªá th·ªëng")
        sudo_layout = QVBoxLayout(sudo_group)
        
        check_sudo_btn = QPushButton("Ki·ªÉm tra quy·ªÅn sudo")
        check_sudo_btn.clicked.connect(self.check_sudo_permissions)
        sudo_layout.addWidget(check_sudo_btn)
        
        layout.addWidget(sudo_group)
        
        # Th√¥ng tin ·ª©ng d·ª•ng
        about_group = QGroupBox("‚ÑπÔ∏è Th√¥ng tin")
        about_layout = QVBoxLayout(about_group)
        
        about_text = QLabel(
            "FocusGuard v1.0.0\n"
            "·ª®ng d·ª•ng qu·∫£n l√Ω s·ª± t·∫≠p trung\n"
            "Ph√°t tri·ªÉn cho Ubuntu/Linux\n\n"
            "¬© 2025 FocusGuard Team"
        )
        about_text.setAlignment(Qt.AlignCenter)
        about_layout.addWidget(about_text)
        
        layout.addWidget(about_group)
        
        layout.addStretch()
        
        return widget
    
    def setup_system_tray(self):
        """Thi·∫øt l·∫≠p system tray"""
        if QSystemTrayIcon.isSystemTrayAvailable():
            self.tray_icon = QSystemTrayIcon(self)
            
            # Menu tray
            tray_menu = QMenu()
            
            show_action = QAction("Hi·ªÉn th·ªã", self)
            show_action.triggered.connect(self.show)
            tray_menu.addAction(show_action)
            
            tray_menu.addSeparator()
            
            quit_action = QAction("Tho√°t", self)
            quit_action.triggered.connect(self.quit_application)
            tray_menu.addAction(quit_action)
            
            self.tray_icon.setContextMenu(tray_menu)
            self.tray_icon.activated.connect(self.tray_icon_activated)
            
            # Icon (s·ª≠ d·ª•ng icon m·∫∑c ƒë·ªãnh t·∫°m th·ªùi)
            self.tray_icon.setToolTip("FocusGuard")
            self.tray_icon.show()
    
    def setup_connections(self):
        """Thi·∫øt l·∫≠p c√°c k·∫øt n·ªëi signal/slot"""
        self.focus_timer.timeChanged.connect(self.update_timer_display)
        self.focus_timer.finished.connect(self.on_timer_finished)
    
    def restore_window_position(self):
        """Kh√¥i ph·ª•c v·ªã tr√≠ c·ª≠a s·ªï"""
        pos = self.config_manager.get("window_position", {"x": 100, "y": 100})
        size = self.config_manager.get("window_size", {"width": 900, "height": 700})
        
        self.move(pos["x"], pos["y"])
        self.resize(size["width"], size["height"])
    
    def check_existing_session(self):
        """Ki·ªÉm tra phi√™n ƒëang ch·∫°y"""
        current_session = self.session_manager.get_current_session()
        if current_session:
            # C√≥ phi√™n ƒëang ch·∫°y
            reply = QMessageBox.question(
                self,
                "Phi√™n ƒëang ch·∫°y",
                "C√≥ phi√™n t·∫≠p trung ƒëang ch·∫°y t·ª´ tr∆∞·ªõc.\n"
                "B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c phi√™n n√†y kh√¥ng?",
                QMessageBox.Yes | QMessageBox.No
            )
            
            if reply == QMessageBox.Yes:
                self.resume_session(current_session)
            else:
                # K·∫øt th√∫c phi√™n c≈©
                self.session_manager.end_session(current_session['id'], completed=False, notes="B·ªã gi√°n ƒëo·∫°n do kh·ªüi ƒë·ªông l·∫°i app")
    
    def resume_session(self, session_info):
        """Ti·∫øp t·ª•c phi√™n ƒëang ch·∫°y"""
        self.current_session_id = session_info['id']
        self.is_focus_session_active = True
        
        # T√≠nh th·ªùi gian c√≤n l·∫°i
        from datetime import datetime
        elapsed = (datetime.now() - session_info['start_time']).total_seconds()
        planned_seconds = session_info['planned_duration'] * 60
        remaining_seconds = max(0, planned_seconds - elapsed)
        
        if remaining_seconds > 0:
            # B·∫Øt ƒë·∫ßu timer v·ªõi th·ªùi gian c√≤n l·∫°i
            self.focus_timer.remaining_seconds = int(remaining_seconds)
            self.focus_timer.is_running = True
            self.focus_timer.start()
            
            # C·∫≠p nh·∫≠t UI
            self.start_btn.setEnabled(False)
            self.stop_btn.setEnabled(True)
            self.progress_bar.setVisible(True)
            self.progress_bar.setMaximum(planned_seconds)
            
            # B·∫≠t ch·∫∑n website
            if not self.website_blocker.add_block_entries(session_info['websites_blocked']):
                QMessageBox.warning(self, "L·ªói", "Kh√¥ng th·ªÉ ch·∫∑n website. Ki·ªÉm tra quy·ªÅn sudo!")
        else:
            # Phi√™n ƒë√£ h·∫øt th·ªùi gian
            self.on_timer_finished()
    
    # === TIMER METHODS ===
    
    def start_focus_session(self):
        """B·∫Øt ƒë·∫ßu phi√™n t·∫≠p trung"""
        # Ki·ªÉm tra quy·ªÅn sudo
        if not self.website_blocker.has_sudo_access():
            reply = QMessageBox.question(
                self,
                "Kh√¥ng c√≥ quy·ªÅn sudo",
                "·ª®ng d·ª•ng c·∫ßn quy·ªÅn sudo ƒë·ªÉ ch·∫∑n website.\n"
                "B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c m√† kh√¥ng ch·∫∑n website kh√¥ng?",
                QMessageBox.Yes | QMessageBox.No
            )
            
            if reply == QMessageBox.No:
                return
        
        duration = self.duration_spinbox.value()
        websites = self.config_manager.get_blocked_websites()
        
        # T·∫°o phi√™n m·ªõi
        self.current_session_id = self.session_manager.start_session(duration, websites)
        if self.current_session_id == -1:
            QMessageBox.critical(self, "L·ªói", "Kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu phi√™n t·∫≠p trung!")
            return
        
        # Ch·∫∑n website
        if self.website_blocker.has_sudo_access():
            if not self.website_blocker.add_block_entries(websites):
                QMessageBox.warning(self, "L·ªói", "Kh√¥ng th·ªÉ ch·∫∑n website!")
        
        # B·∫Øt ƒë·∫ßu timer
        self.focus_timer.start_timer(duration)
        self.is_focus_session_active = True
        
        # C·∫≠p nh·∫≠t UI
        self.start_btn.setEnabled(False)
        self.stop_btn.setEnabled(True)
        self.progress_bar.setVisible(True)
        self.progress_bar.setMaximum(duration * 60)
        
        # L∆∞u th·ªùi l∆∞·ª£ng m·∫∑c ƒë·ªãnh
        self.config_manager.set_focus_duration(duration)
        
        QMessageBox.information(
            self,
            "B·∫Øt ƒë·∫ßu t·∫≠p trung",
            f"Phi√™n t·∫≠p trung {duration} ph√∫t ƒë√£ b·∫Øt ƒë·∫ßu!\n"
            "Website xao nh√£ng ƒë√£ ƒë∆∞·ª£c ch·∫∑n."
        )
    
    def stop_focus_session(self):
        """D·ª´ng phi√™n t·∫≠p trung"""
        if not self.is_focus_session_active:
            return
        
        # Ki·ªÉm tra ch·∫ø ƒë·ªô nghi√™m kh·∫Øc
        if self.config_manager.is_strict_mode():
            # Y√™u c·∫ßu m·∫≠t kh·∫©u
            dialog = PasswordDialog(self.password_manager, "D·ª´ng phi√™n t·∫≠p trung", self)
            if dialog.exec_() != dialog.Accepted:
                return
        
        # D·ª´ng timer
        self.focus_timer.stop_timer()
        
        # K·∫øt th√∫c phi√™n
        if self.current_session_id:
            self.session_manager.end_session(
                self.current_session_id, 
                completed=False, 
                notes="D·ª´ng s·ªõm b·ªüi ng∆∞·ªùi d√πng"
            )
        
        # T·∫Øt ch·∫∑n website
        self.website_blocker.remove_block_entries()
        
        # C·∫≠p nh·∫≠t UI
        self.reset_ui_after_session()
        
        QMessageBox.information(self, "D·ª´ng phi√™n", "Phi√™n t·∫≠p trung ƒë√£ ƒë∆∞·ª£c d·ª´ng.")
    
    def on_timer_finished(self):
        """X·ª≠ l√Ω khi timer k·∫øt th√∫c"""
        # K·∫øt th√∫c phi√™n
        if self.current_session_id:
            self.session_manager.end_session(
                self.current_session_id,
                completed=True,
                notes="Ho√†n th√†nh ƒë·∫ßy ƒë·ªß"
            )
        
        # T·∫Øt ch·∫∑n website
        self.website_blocker.remove_block_entries()
        
        # C·∫≠p nh·∫≠t UI
        self.reset_ui_after_session()
        
        # C·∫≠p nh·∫≠t th·ªëng k√™
        self.update_today_stats()
        
        # Th√¥ng b√°o ho√†n th√†nh
        QMessageBox.information(
            self,
            "üéâ Ho√†n th√†nh!",
            "Ch√∫c m·ª´ng! B·∫°n ƒë√£ ho√†n th√†nh phi√™n t·∫≠p trung.\n"
            "C√°c trang web ƒë√£ ƒë∆∞·ª£c m·ªü kh√≥a."
        )
    
    def reset_ui_after_session(self):
        """Reset UI sau khi k·∫øt th√∫c phi√™n"""
        self.is_focus_session_active = False
        self.current_session_id = None
        
        self.start_btn.setEnabled(True)
        self.stop_btn.setEnabled(False)
        self.progress_bar.setVisible(False)
        
        # Reset hi·ªÉn th·ªã th·ªùi gian
        duration = self.duration_spinbox.value()
        self.time_display.setText(f"{duration:02d}:00")
    
    def update_timer_display(self, remaining_seconds):
        """C·∫≠p nh·∫≠t hi·ªÉn th·ªã timer"""
        minutes = remaining_seconds // 60
        seconds = remaining_seconds % 60
        self.time_display.setText(f"{minutes:02d}:{seconds:02d}")
        
        # C·∫≠p nh·∫≠t thanh ti·∫øn tr√¨nh
        if self.progress_bar.isVisible():
            total_seconds = self.progress_bar.maximum()
            progress = total_seconds - remaining_seconds
            self.progress_bar.setValue(progress)
    
    # === WEBSITE MANAGEMENT ===
    
    def update_website_list(self):
        """C·∫≠p nh·∫≠t danh s√°ch website"""
        self.website_list.clear()
        websites = self.config_manager.get_blocked_websites()
        self.website_list.addItems(websites)
    
    def add_website(self):
        """Th√™m website v√†o danh s√°ch ch·∫∑n"""
        website = self.website_input.text().strip().lower()
        
        if not website:
            QMessageBox.warning(self, "L·ªói", "Vui l√≤ng nh·∫≠p t√™n website!")
            return
        
        # X√≥a http:// https:// n·∫øu c√≥
        website = website.replace("http://", "").replace("https://", "")
        website = website.replace("www.", "")  # C≈©ng x√≥a www. ƒë·ªÉ chu·∫©n h√≥a
        
        if website in self.config_manager.get_blocked_websites():
            QMessageBox.information(self, "Th√¥ng b√°o", "Website n√†y ƒë√£ c√≥ trong danh s√°ch!")
            return
        
        self.config_manager.add_blocked_website(website)
        self.update_website_list()
        self.website_input.clear()
    
    def remove_website(self):
        """X√≥a website kh·ªèi danh s√°ch"""
        current_item = self.website_list.currentItem()
        if not current_item:
            QMessageBox.warning(self, "L·ªói", "Vui l√≤ng ch·ªçn website c·∫ßn x√≥a!")
            return
        
        website = current_item.text()
        reply = QMessageBox.question(
            self,
            "X√°c nh·∫≠n",
            f"B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a '{website}' kh·ªèi danh s√°ch ch·∫∑n?",
            QMessageBox.Yes | QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            self.config_manager.remove_blocked_website(website)
            self.update_website_list()
    
    # === SETTINGS ===
    
    def toggle_strict_mode(self, checked):
        """B·∫≠t/t·∫Øt ch·∫ø ƒë·ªô nghi√™m kh·∫Øc"""
        self.config_manager.set_strict_mode(checked)
        
        if checked:
            QMessageBox.information(
                self,
                "Ch·∫ø ƒë·ªô nghi√™m kh·∫Øc",
                "ƒê√£ b·∫≠t ch·∫ø ƒë·ªô nghi√™m kh·∫Øc!\n"
                "Trong phi√™n t·∫≠p trung, b·∫°n s·∫Ω kh√¥ng th·ªÉ:\n"
                "‚Ä¢ D·ª´ng phi√™n s·ªõm m√† kh√¥ng nh·∫≠p m·∫≠t kh·∫©u\n"
                "‚Ä¢ Tho√°t ·ª©ng d·ª•ng\n"
                "‚Ä¢ Kill ·ª©ng d·ª•ng t·ª´ terminal"
            )
    
    def change_password(self):
        """ƒê·ªïi m·∫≠t kh·∫©u"""
        # X√°c th·ª±c m·∫≠t kh·∫©u c≈©
        dialog = PasswordDialog(self.password_manager, "X√°c th·ª±c m·∫≠t kh·∫©u c≈©", self)
        if dialog.exec_() != dialog.Accepted:
            return
        
        # Nh·∫≠p m·∫≠t kh·∫©u m·ªõi (t∆∞∆°ng t·ª± setup dialog)
        from src.gui.setup_dialog import SetupDialog
        setup_dialog = SetupDialog(self)
        setup_dialog.setWindowTitle("ƒê·ªïi m·∫≠t kh·∫©u")
        
        if setup_dialog.exec_() == setup_dialog.Accepted:
            QMessageBox.information(self, "Th√†nh c√¥ng", "M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi!")
    
    def check_sudo_permissions(self):
        """Ki·ªÉm tra quy·ªÅn sudo"""
        if self.website_blocker.has_sudo_access():
            QMessageBox.information(
                self,
                "Quy·ªÅn sudo",
                "‚úÖ ·ª®ng d·ª•ng c√≥ quy·ªÅn sudo.\n"
                "C√≥ th·ªÉ ch·∫∑n website th√†nh c√¥ng."
            )
        else:
            QMessageBox.warning(
                self,
                "Quy·ªÅn sudo",
                "‚ùå ·ª®ng d·ª•ng kh√¥ng c√≥ quy·ªÅn sudo.\n"
                "C·∫ßn ch·∫°y l·ªánh sau trong terminal:\n\n"
                "sudo visudo\n\n"
                "V√† th√™m d√≤ng:\n"
                f"{os.getenv('USER')} ALL=(ALL) NOPASSWD: /bin/cp, /usr/bin/test"
            )
    
    # === HISTORY & STATS ===
    
    def update_history_display(self):
        """C·∫≠p nh·∫≠t hi·ªÉn th·ªã l·ªãch s·ª≠"""
        sessions = self.session_manager.get_recent_sessions(20)
        
        html = "<html><body>"
        html += "<h3>üìö L·ªãch s·ª≠ phi√™n t·∫≠p trung</h3>"
        
        if not sessions:
            html += "<p>Ch∆∞a c√≥ phi√™n n√†o ƒë∆∞·ª£c ho√†n th√†nh.</p>"
        else:
            for session in sessions:
                start_time = session['start_time']
                duration = session['actual_duration']
                status = "‚úÖ Ho√†n th√†nh" if session['completed'] else "‚ùå Gi√°n ƒëo·∫°n"
                
                html += f"""
                <div style='border: 1px solid #ddd; margin: 5px; padding: 10px; border-radius: 5px;'>
                    <strong>Phi√™n #{session['id']}</strong><br>
                    <strong>Th·ªùi gian:</strong> {start_time}<br>
                    <strong>Th·ªùi l∆∞·ª£ng:</strong> {duration} ph√∫t<br>
                    <strong>Tr·∫°ng th√°i:</strong> {status}<br>
                    <strong>Ghi ch√∫:</strong> {session['notes'] or 'Kh√¥ng c√≥'}
                </div>
                """
        
        html += "</body></html>"
        self.history_text.setHtml(html)
    
    def update_today_stats(self):
        """C·∫≠p nh·∫≠t th·ªëng k√™ h√¥m nay"""
        today_stats = self.session_manager.get_today_stats()
        
        self.total_time_label.setText(f"{today_stats['total_focus_time']} ph√∫t")
        self.sessions_count_label.setText(str(today_stats['sessions_completed']))
        self.success_rate_label.setText(f"{today_stats['success_rate']:.1f}%")
        
        # C·∫≠p nh·∫≠t stats widget
        if hasattr(self, 'stats_widget'):
            self.stats_widget.refresh_stats()
    
    # === WINDOW EVENTS ===
    
    def tray_icon_activated(self, reason):
        """X·ª≠ l√Ω click v√†o system tray"""
        if reason == QSystemTrayIcon.DoubleClick:
            if self.isVisible():
                self.hide()
            else:
                self.show()
                self.activateWindow()
    
    def closeEvent(self, event):
        """X·ª≠ l√Ω ƒë√≥ng c·ª≠a s·ªï"""
        if self.is_focus_session_active and self.config_manager.is_strict_mode():
            # Ch·∫ø ƒë·ªô nghi√™m kh·∫Øc - y√™u c·∫ßu m·∫≠t kh·∫©u
            dialog = PasswordDialog(self.password_manager, "Tho√°t ·ª©ng d·ª•ng", self)
            if dialog.exec_() != dialog.Accepted:
                event.ignore()
                return
        
        # ·∫®n v√†o system tray thay v√¨ tho√°t
        if hasattr(self, 'tray_icon') and self.tray_icon.isVisible():
            self.hide()
            event.ignore()
        else:
            self.quit_application()
    
    def quit_application(self):
        """Tho√°t ·ª©ng d·ª•ng ho√†n to√†n"""
        # L∆∞u v·ªã tr√≠ c·ª≠a s·ªï
        pos = self.pos()
        size = self.size()
        self.config_manager.set("window_position", {"x": pos.x(), "y": pos.y()})
        self.config_manager.set("window_size", {"width": size.width(), "height": size.height()})
        
        # D·ª´ng phi√™n n·∫øu ƒëang ch·∫°y
        if self.is_focus_session_active:
            self.focus_timer.stop_timer()
            if self.current_session_id:
                self.session_manager.end_session(
                    self.current_session_id,
                    completed=False,
                    notes="Tho√°t ·ª©ng d·ª•ng"
                )
            self.website_blocker.remove_block_entries()
        
        # Tho√°t ·ª©ng d·ª•ng
        from PyQt5.QtWidgets import QApplication
        QApplication.quit()
